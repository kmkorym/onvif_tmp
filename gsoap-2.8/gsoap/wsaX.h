/* wsaX.h
   Generated by wsdl2h 2.8.122 from WS/WS-Addressing.xsd and WS/WS-typemap.dat
   2022-08-08 14:22:57 GMT

   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE.

gSOAP XML Web services tools
Copyright (C) 2000-2022, Robert van Engelen, Genivia Inc. All Rights Reserved.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial use license is available from Genivia Inc., contact@genivia.com
--------------------------------------------------------------------------------
*/

/**

@page page_notes Notes

@note HINTS:
 - Run soapcpp2 on wsaX.h to generate the SOAP/XML processing logic:
   Use soapcpp2 -I to specify paths for #import
   Use soapcpp2 -j to generate improved proxy and server classes.
   Use soapcpp2 -r to generate a report.
 - Edit 'typemap.dat' to control namespace bindings and type mappings:
   It is strongly recommended to customize the names of the namespace prefixes
   generated by wsdl2h. To do so, modify the prefix bindings in the Namespaces
   section below and add the modified lines to 'typemap.dat' to rerun wsdl2h.
 - Run Doxygen (www.doxygen.org) on this file to generate documentation.
 - Use wsdl2h -c to generate pure C code.
 - Use wsdl2h -R to include the REST operations defined by the WSDLs.
 - Use wsdl2h -O3 or -O4 to optimize by removing unused schema components.
 - Use wsdl2h -d to enable DOM support for xsd:any and xsd:anyType.
 - Use wsdl2h -F to simulate struct-type derivation in C (also works in C++).
 - Use wsdl2h -f to generate flat C++ class hierarchy, removes type derivation.
 - Use wsdl2h -g to generate top-level root elements with readers and writers.
 - Use wsdl2h -U to map XML names to C++ Unicode identifiers instead of _xNNNN.
 - Use wsdl2h -u to disable the generation of unions.
 - Use wsdl2h -L to remove this @note and all other @note comments.
 - Use wsdl2h -nname to use name as the base namespace prefix instead of 'ns'.
 - Use wsdl2h -Nname for service prefix and produce multiple service bindings
 - Struct/class members serialized as XML attributes are annotated with a '@'.
 - Struct/class members that have a special role are annotated with a '$'.

@warning
   DO NOT INCLUDE THIS ANNOTATED FILE DIRECTLY IN YOUR PROJECT SOURCE CODE.
   USE THE FILES GENERATED BY soapcpp2 FOR YOUR PROJECT'S SOURCE CODE:
   THE GENERATED soapStub.h FILE CONTAINS THIS CONTENT WITHOUT ANNOTATIONS.

@copyright LICENSE:
@verbatim
--------------------------------------------------------------------------------
gSOAP XML Web services tools
Copyright (C) 2000-2021, Robert van Engelen, Genivia Inc. All Rights Reserved.
The wsdl2h tool and its generated software are released under the GPL.
This software is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
GPL license.

This program is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free Software
Foundation; either version 2 of the License, or (at your option) any later
version.

This program is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE. See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
this program; if not, write to the Free Software Foundation, Inc., 59 Temple
Place, Suite 330, Boston, MA 02111-1307 USA

Author contact information:
engelen@genivia.com / engelen@acm.org

This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
--------------------------------------------------------------------------------
A commercial-use license is available from Genivia, Inc., contact@genivia.com
--------------------------------------------------------------------------------
@endverbatim

*/


//gsoapopt c,w

/******************************************************************************\
 *                                                                            *
 * Definitions                                                                *
 *   http://schemas.xmlsoap.org/ws/2004/08/addressing                         *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * $SIZE typemap variable:                                                    *
 *   int                                                                      *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Import                                                                     *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Schema Namespaces                                                          *
 *                                                                            *
\******************************************************************************/


/* NOTE:

It is strongly recommended to customize the names of the namespace prefixes
generated by wsdl2h. To do so, modify the prefix bindings below and add the
modified lines to 'typemap.dat' then rerun wsdl2h (use wsdl2h -t typemap.dat):

wsa = "http://schemas.xmlsoap.org/ws/2004/08/addressing"

*/

#define SOAP_NAMESPACE_OF_wsa	"http://schemas.xmlsoap.org/ws/2004/08/addressing"
//gsoap wsa   schema namespace:	http://schemas.xmlsoap.org/ws/2004/08/addressing
//gsoap wsa   schema elementForm:	qualified
//gsoap wsa   schema attributeForm:	unqualified

/******************************************************************************\
 *                                                                            *
 * Built-in Schema Types and Top-Level Elements and Attributes                *
 *                                                                            *
\******************************************************************************/


/// Imported complexType "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReplyAfterType from typemap "WS/WS-typemap.dat".
// complexType definition intentionally left blank.

/// Imported complexType "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedQName from typemap "WS/WS-typemap.dat".
// complexType definition intentionally left blank.

/// Imported complexType "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedURI from typemap "WS/WS-typemap.dat".
// complexType definition intentionally left blank.


/******************************************************************************\
 *                                                                            *
 * Schema Types and Top-Level Elements and Attributes                         *
 *   http://schemas.xmlsoap.org/ws/2004/08/addressing                         *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":RelationshipTypeValues is a simpleType restriction of type xs:QName.
///
/// @note The enum values are prefixed with "wsa__RelationshipTypeValues__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum wsa__RelationshipTypeValues
{
	wsa__RelationshipTypeValues__wsa__Reply,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":Reply"
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":FaultSubcodeValues is a simpleType restriction of type xs:QName.
///
/// @note The enum values are prefixed with "wsa__FaultSubcodeValues__" to prevent name clashes: use wsdl2h option -e to omit this prefix or use option -c++11 for scoped enumerations
enum wsa__FaultSubcodeValues
{
	wsa__FaultSubcodeValues__wsa__InvalidMessageInformationHeader,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":InvalidMessageInformationHeader"
	wsa__FaultSubcodeValues__wsa__MessageInformationHeaderRequired,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":MessageInformationHeaderRequired"
	wsa__FaultSubcodeValues__wsa__DestinationUnreachable,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":DestinationUnreachable"
	wsa__FaultSubcodeValues__wsa__ActionNotSupported,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":ActionNotSupported"
	wsa__FaultSubcodeValues__wsa__EndpointUnavailable,	///< xs:QName value=""http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointUnavailable"
};


/******************************************************************************\
 *                                                                            *
 * Schema Complex Types and Top-Level Elements                                *
 *   http://schemas.xmlsoap.org/ws/2004/08/addressing                         *
 *                                                                            *
\******************************************************************************/

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReferenceType is a complexType.
///
/// @note struct wsa__EndpointReferenceType operations:
/// - wsa__EndpointReferenceType* soap_new_wsa__EndpointReferenceType(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_wsa__EndpointReferenceType(struct soap*, wsa__EndpointReferenceType*) default initialize members
/// - int soap_read_wsa__EndpointReferenceType(struct soap*, wsa__EndpointReferenceType*) deserialize from a source
/// - int soap_write_wsa__EndpointReferenceType(struct soap*, wsa__EndpointReferenceType*) serialize to a sink
/// - wsa__EndpointReferenceType* soap_dup_wsa__EndpointReferenceType(struct soap*, wsa__EndpointReferenceType* dst, wsa__EndpointReferenceType *src) returns deep copy of wsa__EndpointReferenceType src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_wsa__EndpointReferenceType(wsa__EndpointReferenceType*) deep deletes wsa__EndpointReferenceType data members, use only on dst after soap_dup_wsa__EndpointReferenceType(NULL, wsa__EndpointReferenceType *dst, wsa__EndpointReferenceType *src) (use soapcpp2 -Ed)
struct wsa__EndpointReferenceType
{
/// Element "Address" of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedURI.
    char*                                Address                        1;	///< Required element.
/// Element "ReferenceProperties" of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReferencePropertiesType.
    struct wsa__ReferencePropertiesType*  ReferenceProperties            0;	///< Optional element.
/// Element "ReferenceParameters" of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReferenceParametersType.
    struct wsa__ReferenceParametersType*  ReferenceParameters            0;	///< Optional element.
/// Element "PortType" of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedQName.
    _QName                               PortType                       0;	///< Optional element.
/// Element "ServiceName" of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":ServiceNameType.
    struct wsa__ServiceNameType*         ServiceName                    0;	///< Optional element.
/// <any namespace="##other" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
  $ int                                  __size                        0;
    _XML                                *__any                         0;	///< Store any element content in XML string.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ _XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReferencePropertiesType is a complexType.
///
/// @note struct wsa__ReferencePropertiesType operations:
/// - wsa__ReferencePropertiesType* soap_new_wsa__ReferencePropertiesType(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_wsa__ReferencePropertiesType(struct soap*, wsa__ReferencePropertiesType*) default initialize members
/// - int soap_read_wsa__ReferencePropertiesType(struct soap*, wsa__ReferencePropertiesType*) deserialize from a source
/// - int soap_write_wsa__ReferencePropertiesType(struct soap*, wsa__ReferencePropertiesType*) serialize to a sink
/// - wsa__ReferencePropertiesType* soap_dup_wsa__ReferencePropertiesType(struct soap*, wsa__ReferencePropertiesType* dst, wsa__ReferencePropertiesType *src) returns deep copy of wsa__ReferencePropertiesType src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_wsa__ReferencePropertiesType(wsa__ReferencePropertiesType*) deep deletes wsa__ReferencePropertiesType data members, use only on dst after soap_dup_wsa__ReferencePropertiesType(NULL, wsa__ReferencePropertiesType *dst, wsa__ReferencePropertiesType *src) (use soapcpp2 -Ed)
struct wsa__ReferencePropertiesType
{
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
  $ int                                  __size                        0;
    _XML                                *__any                         0;	///< Store any element content in XML string.
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReferenceParametersType is a complexType.
///
/// @note struct wsa__ReferenceParametersType operations:
/// - wsa__ReferenceParametersType* soap_new_wsa__ReferenceParametersType(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_wsa__ReferenceParametersType(struct soap*, wsa__ReferenceParametersType*) default initialize members
/// - int soap_read_wsa__ReferenceParametersType(struct soap*, wsa__ReferenceParametersType*) deserialize from a source
/// - int soap_write_wsa__ReferenceParametersType(struct soap*, wsa__ReferenceParametersType*) serialize to a sink
/// - wsa__ReferenceParametersType* soap_dup_wsa__ReferenceParametersType(struct soap*, wsa__ReferenceParametersType* dst, wsa__ReferenceParametersType *src) returns deep copy of wsa__ReferenceParametersType src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_wsa__ReferenceParametersType(wsa__ReferenceParametersType*) deep deletes wsa__ReferenceParametersType data members, use only on dst after soap_dup_wsa__ReferenceParametersType(NULL, wsa__ReferenceParametersType *dst, wsa__ReferenceParametersType *src) (use soapcpp2 -Ed)
struct wsa__ReferenceParametersType
{
/// <any namespace="##any" minOccurs="0" maxOccurs="unbounded">
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this element.
///       Use wsdl2h option -d for xsd__anyType DOM (soap_dom_element):
///       wsdl2h maps xsd:any to xsd__anyType, use typemap.dat to remap.
/// Size of the array of XML or DOM nodes is 0..unbounded.
  $ int                                  __size                        0;
    _XML                                *__any                         0;	///< Store any element content in XML string.
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":ServiceNameType is a complexType with simpleContent extension of type xs:QName.
///
/// @note struct wsa__ServiceNameType operations:
/// - wsa__ServiceNameType* soap_new_wsa__ServiceNameType(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_wsa__ServiceNameType(struct soap*, wsa__ServiceNameType*) default initialize members
/// - int soap_read_wsa__ServiceNameType(struct soap*, wsa__ServiceNameType*) deserialize from a source
/// - int soap_write_wsa__ServiceNameType(struct soap*, wsa__ServiceNameType*) serialize to a sink
/// - wsa__ServiceNameType* soap_dup_wsa__ServiceNameType(struct soap*, wsa__ServiceNameType* dst, wsa__ServiceNameType *src) returns deep copy of wsa__ServiceNameType src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_wsa__ServiceNameType(wsa__ServiceNameType*) deep deletes wsa__ServiceNameType data members, use only on dst after soap_dup_wsa__ServiceNameType(NULL, wsa__ServiceNameType *dst, wsa__ServiceNameType *src) (use soapcpp2 -Ed)
struct wsa__ServiceNameType
{
/// INHERITED FROM wsa__ServiceNameType:
/// __item wraps simpleContent of type xs:QName.
    _QName                               __item                        ;
/// Attribute "PortName" of type xs:NCName.
  @ char*                                PortName                       0;	///< Optional attribute.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ _XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM wsa__ServiceNameType
};

/// @brief "http://schemas.xmlsoap.org/ws/2004/08/addressing":Relationship is a complexType with simpleContent extension of type xs:anyURI.
///
/// @note struct wsa__Relationship operations:
/// - wsa__Relationship* soap_new_wsa__Relationship(struct soap*, int num) allocate and default initialize one or more values (an array)
/// - soap_default_wsa__Relationship(struct soap*, wsa__Relationship*) default initialize members
/// - int soap_read_wsa__Relationship(struct soap*, wsa__Relationship*) deserialize from a source
/// - int soap_write_wsa__Relationship(struct soap*, wsa__Relationship*) serialize to a sink
/// - wsa__Relationship* soap_dup_wsa__Relationship(struct soap*, wsa__Relationship* dst, wsa__Relationship *src) returns deep copy of wsa__Relationship src into dst, copies the (cyclic) graph structure when a context is provided, or (cycle-pruned) tree structure with soap_set_mode(soap, SOAP_XML_TREE) (use soapcpp2 -Ec)
/// - soap_del_wsa__Relationship(wsa__Relationship*) deep deletes wsa__Relationship data members, use only on dst after soap_dup_wsa__Relationship(NULL, wsa__Relationship *dst, wsa__Relationship *src) (use soapcpp2 -Ed)
struct wsa__Relationship
{
/// INHERITED FROM wsa__Relationship:
/// __item wraps simpleContent of type xs:anyURI.
    char*                                __item                        ;
/// Attribute "RelationshipType" of type xs:QName.
  @ _QName                               RelationshipType               0;	///< Optional attribute.
/// <anyAttribute namespace="##other">.
/// @note Schema extensibility is user-definable.
///       Consult the protocol documentation to change or insert declarations.
///       Use wsdl2h option -x to remove this attribute.
///       Use wsdl2h option -d for xsd__anyAttribute DOM (soap_dom_attribute).
  @ _XML                                 __anyAttribute                ;	///< A placeholder that has no effect: please see comment.
//  END OF INHERITED FROM wsa__Relationship
};


/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Elements                                              *
 *   http://schemas.xmlsoap.org/ws/2004/08/addressing                         *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReference of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReferenceType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":MessageID of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedURI.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":RelatesTo of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":Relationship.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":To of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedURI.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":Action of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":AttributedURI.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":From of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReferenceType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReplyTo of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReferenceType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":FaultTo of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":EndpointReferenceType.
/// @note Use wsdl2h option -g to auto-generate a top-level root element declaration.

/// @brief Top-level root element "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReplyAfter of type "http://schemas.xmlsoap.org/ws/2004/08/addressing":ReplyAfterType.
// "_wsa__ReplyAfter" element definition intentionally left blank.

/******************************************************************************\
 *                                                                            *
 * Additional Top-Level Attributes                                            *
 *   http://schemas.xmlsoap.org/ws/2004/08/addressing                         *
 *                                                                            *
\******************************************************************************/

/// @brief Top-level attribute "http://schemas.xmlsoap.org/ws/2004/08/addressing":Action of simpleType xs:anyURI.
/// @note Use wsdl2h option -g to auto-generate a top-level attribute declaration.


/******************************************************************************\
 *                                                                            *
 * XML Data Binding                                                           *
 *                                                                            *
\******************************************************************************/


/** @page page_XMLDataBinding XML Data Binding

SOAP/XML services use data bindings that are contractually bound by WSDLs and
are auto-generated by wsdl2h and soapcpp2 (see Service Bindings). Plain data
bindings are adopted from XML schemas as part of the WSDL types section or when
running wsdl2h on a set of schemas to produce non-SOAP-based XML data bindings.

@note The following readers and writers are C/C++ data type (de)serializers
auto-generated by wsdl2h and soapcpp2. Run soapcpp2 on this file to generate the
(de)serialization code, which is stored in soapC.c[pp]. Include "soapH.h" in
your code to import these data type and function declarations. Only use the
soapcpp2-generated files in your project build. Do not include the wsdl2h-
generated .h file in your code.

@note Data can be read and deserialized from:
  - an int file descriptor, using soap->recvfd = fd
  - a socket, using soap->socket = (int)...
  - a C++ stream (istream, stringstream), using soap->is = (istream*)...
  - a C string, using soap->is = (const char*)...
  - any input, using the soap->frecv() callback

@note Data can be serialized and written to:
  - an int file descriptor, using soap->sendfd = (int)...
  - a socket, using soap->socket = (int)...
  - a C++ stream (ostream, stringstream), using soap->os = (ostream*)...
  - a C string, using soap->os = (const char**)...
  - any output, using the soap->fsend() callback

@note The following options are available for (de)serialization control:
  - soap->encodingStyle = NULL; to remove SOAP 1.1/1.2 encodingStyle
  - soap_set_mode(soap, SOAP_XML_TREE); XML without id-ref (no cycles!)
  - soap_set_mode(soap, SOAP_XML_GRAPH); XML with id-ref (including cycles)
  - soap_set_namespaces(soap, struct Namespace *nsmap); to set xmlns bindings


*/

/**

@section wsa Top-level root elements of schema "http://schemas.xmlsoap.org/ws/2004/08/addressing"

  - <wsa:EndpointReference> (use wsdl2h option -g to auto-generate type _wsa__EndpointReference)

  - <wsa:MessageID> (use wsdl2h option -g to auto-generate type _wsa__MessageID)

  - <wsa:RelatesTo> (use wsdl2h option -g to auto-generate type _wsa__RelatesTo)

  - <wsa:To> (use wsdl2h option -g to auto-generate type _wsa__To)

  - <wsa:Action> (use wsdl2h option -g to auto-generate type _wsa__Action)

  - <wsa:From> (use wsdl2h option -g to auto-generate type _wsa__From)

  - <wsa:ReplyTo> (use wsdl2h option -g to auto-generate type _wsa__ReplyTo)

  - <wsa:FaultTo> (use wsdl2h option -g to auto-generate type _wsa__FaultTo)

  - <wsa:ReplyAfter> @ref _wsa__ReplyAfter
    @code
    // Reader (returns SOAP_OK on success):
    soap_read__wsa__ReplyAfter(struct soap*, unsigned int*);
    // Writer (returns SOAP_OK on success):
    soap_write__wsa__ReplyAfter(struct soap*, unsigned int*);
    // REST GET (returns SOAP_OK on success):
    soap_GET__wsa__ReplyAfter(struct soap*, const char *URL, unsigned int*);
    // REST PUT (returns SOAP_OK on success):
    soap_PUT__wsa__ReplyAfter(struct soap*, const char *URL, unsigned int*);
    // REST POST (returns SOAP_OK on success):
    soap_POST_send__wsa__ReplyAfter(struct soap*, const char *URL, unsigned int*);
    soap_POST_recv__wsa__ReplyAfter(struct soap*, unsigned int*);
    @endcode

*/

/* End of wsaX.h */
